package com.bitcamp.board.config;

import javax.servlet.Filter;
import javax.servlet.MultipartConfigElement;
import javax.servlet.ServletRegistration.Dynamic;
import javax.servlet.annotation.MultipartConfig;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.filter.CharacterEncodingFilter;
import org.springframework.web.servlet.support.AbstractDispatcherServletInitializer;
import com.bitcamp.board.filter.AdminCheckFilter;
import com.bitcamp.board.filter.LoginCheckFilter;

// 서블릿 컨테이너
// ==> 수퍼클래스 코드를 분석하시오 제발!!

@MultipartConfig(maxFileSize = 1024 * 1024 * 10) 
public class AppWebApplicationInitializer extends AbstractDispatcherServletInitializer {

  // 수퍼클래스에서 ContextLoaderListener를 준비할 때 사용할 Root IoC 컨테이너를 리턴한다.
  @Override
  protected WebApplicationContext createRootApplicationContext() {
    return null; // 설정할 필요가 없다면 null을 리턴
  }

  // 수퍼클래스에서 DispatcherServlet을 준비할 때 사용할 서블릿 이름을 리턴한다.
  @Override
  protected String getServletName() {
    return "app";
  }

  // 수퍼클래스에서 DispatcherServlet을 준비할 때 사용할 IoC 컨테이너를 리턴한다.
  @Override
  protected WebApplicationContext createServletApplicationContext() {
    // 웹관련 컴포넌트를 다룰 수 있는 기능이 포함된 스프링 IoC 컨테이너 준비
    AnnotationConfigWebApplicationContext iocContainer = 
        new AnnotationConfigWebApplicationContext();
    iocContainer.register(AppConfig.class);
    return iocContainer;
  }

  // 수퍼 클래스에서 DispatcherServlet 의 URL을 연결할 때 사용할 경로를 리턴한다.
  @Override
  protected String[] getServletMappings() {
    return new String[] {"/app/*"};
  }

  // 수퍼클래스에서 필터를 등록할 때 사용할 정보를 리턴한다.
  @Override
  protected Filter[] getServletFilters() {

    return new Filter[] {
        new CharacterEncodingFilter("UTF-8"),
        new AdminCheckFilter(),
        new LoginCheckFilter()
    };
    //    // "app" 이름의 프론트 컨트롤러에 필터를 붙인다.
    //    CharacterEncodingFilter filter = new CharacterEncodingFilter("UTF-8");
    //    FilterRegistration.Dynamic filterConfig = servletContext.addFilter("CharacterEncodingFilter", filter);
    //    filterConfig.addMappingForServletNames(
    //        EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), // EnumSet은 상수 배열
    //        false, // 요청이 들어올때 실행할것이다 <-> true는 응답할때 실행할거라는 뜻임
    //        "app"); // 필터를 실행할 서블릿
    //
    //    AdminCheckFilter adminFilter = new AdminCheckFilter();
    //    FilterRegistration.Dynamic adminFilterConfig = servletContext.addFilter("AdminCheckFilter", adminFilter);
    //    adminFilterConfig.addMappingForUrlPatterns(
    //        EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), 
    //        false, 
    //        "/app/member/*"); // 이 url에 해당하는 경로가 들어왔을때마다 필터를 실행할것임
    //
    //    LoginCheckFilter loginFilter = new LoginCheckFilter();
    //    FilterRegistration.Dynamic loginFilterConfig = servletContext.addFilter("LoginCheckFilter", loginFilter);
    //    loginFilterConfig.addMappingForUrlPatterns(
    //        EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), 
    //        false, 
    //        "/app/*");
  }

  // 수퍼클래스에서 DispatcherServlet을 준비할때 추가적으로 설정할 것이 있으면 설정한다.
  @Override
  protected void customizeRegistration(Dynamic registration) {
    registration.setMultipartConfig(new MultipartConfigElement(
        System.getProperty("java.io.tmpdir"), // 클라이언트가 보낸 파일을 임시 저장할 디렉토리
        1024 * 1024 * 5, // 한 파일의 크기
        1024 * 1024 * 10, // 첨부 파일을 포함한 전체 요청 데이터의 최대 크기
        1024 * 1024 // 첨부파일 데이터를 일시적으로 보관할 버퍼 크기
        ));
  }
  //  // 수퍼클래스의 onStartUp()을 재정의한다.
  //  // => super.onStartup(): ContextLoaderListener를 준비하는 일을 한다.
  //  // => + 프론트 컨트롤러와 프론트 컨트롤러가 사용할 IoC 컨테이너를 등록한다.
  //  @Override
  //  public void onStartup(ServletContext servletContext) throws ServletException {
  //    //    // 수퍼클래스가 ContextLoaderListener를 준비하는 작업은 그대로 수행하게 한다.
  //    //    super.onStartup(servletContext); // 수퍼 클래스의 메서드는 그대로 실행
  //    //    // 프론트 컨트롤러 및 프론트 컨트롤러가 사용할 IoC 컨테이너 준비
  //    //    System.out.println("AppWebApplicationInitializer.onStartup()");
  //
  //    // 웹 애플리케이션의 루트 경로를 ServletContext 보관소에 저장해 둔다.
  //    servletContext.setAttribute("contextPath", servletContext.getContextPath());
  //
  //    //    DispatcherServlet servlet = new DispatcherServlet(iocContainer);
  //    //    Dynamic config = servletContext.addServlet("app", servlet);
  //    //    config.setLoadOnStartup(1); // 웹 애플리케이션을 시작할 때 프론트 컨트롤러를 자동 생성한다.
  //    //    config.addMapping("/app/*");
  //  }
}


